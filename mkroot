#!/usr/bin/python

import argparse
import glob
import hashlib
import os
import os.path
import platform
import shutil
import subprocess
import sys
import tarfile
import urllib

# Utilities to set up a chroot jail filesystem for minijail.  Files are
# hardlinked instead of copied when possible.
class Chroot:
	def __init__(self, path, mountpoint, link=True):
		self.__link = link
		self.chroot = path
		self.mountpoint = mountpoint
		if not self.mountpoint.endswith('/'):
			self.mountpoint += '/'
		if os.path.exists(path):
			shutil.rmtree(path, True)
		os.mkdir(path)
	
	def __chroot_path(self, path, relative_to=None):
                root = relative_to
                if root is None:
                    root = self.mountpoint
		assert path.startswith(root.rstrip('/')), '%s does not start with %s' % (path, root)
		return self.chroot + path[len(root)-1:]

	def mkdir(self, path, relative_to=None):
		path_components = os.path.relpath(self.__chroot_path(path, relative_to),
			self.chroot).split('/')
		for i in xrange(len(path_components) + 1):
			path = os.path.join(self.chroot, *path_components[:i])
			if not os.path.isdir(path):
				os.mkdir(path)

	def copyfromhost(self, path, relative_to=None, exclude=[]):
		if '*' in path:
			for p in glob.glob(path):
				self.copyfromhost(p, relative_to, exclude)
			return
		try:
			self.mkdir(os.path.dirname(path), relative_to)
		except AssertionError:
			# The roots might try to create their parent directory,
			# which will be outside the root.
			pass
		if os.path.isdir(os.path.realpath(path)):
			for root, dirs, files in os.walk(path):
				if any([root.startswith(e) for e in exclude]): continue
				self.mkdir(root, relative_to)
				for f in files:
					filepath = os.path.join(root, f)
					if os.path.islink(filepath):
						target = os.readlink(filepath)
						abspath = os.path.realpath(os.path.join(os.path.dirname(filepath), target))
						if abspath.startswith(self.mountpoint):
							self.symlink(filepath, target)
						else:
							try:
								self.install(filepath, abspath, relative_to)
							except OSError, e:
								print e, abspath, filepath
					else:
						self.install(filepath, os.path.realpath(filepath), relative_to)
				for d in dirs:
					dirpath = os.path.join(root, d)
					if os.path.islink(dirpath):
						target = os.readlink(dirpath)
						abspath = os.path.realpath(os.path.join(os.path.dirname(dirpath), target))
						if abspath.startswith(self.mountpoint):
							self.symlink(dirpath, target)
						else:
							shutil.copytree(abspath, self.__chroot_path(dirpath, relative_to))
		else:
			self.install(path, os.path.realpath(path), relative_to)
	
	def install(self, path, source, relative_to=None):
		self.mkdir(os.path.dirname(path), relative_to)
		while os.path.islink(source):
			source = os.path.join(os.path.dirname(source),
				os.readlink(source))
		if self.__link:
			os.link(source, self.__chroot_path(path, relative_to))
		else:
			shutil.copy(source, self.__chroot_path(path, relative_to))

	def symlink(self, path, destination):
		self.mkdir(os.path.dirname(path))
		os.symlink(destination, self.__chroot_path(path))

	def write(self, path, contents):
		self.mkdir(os.path.dirname(path))
		f = open(self.__chroot_path(path), 'w')
		f.write(contents)
		f.close()
		os.utime(self.__chroot_path(path), (0, 0))
	
	def extract(self, archive, sha1, skipprefix, url, exclude=[]):
		if not os.path.exists(archive):
			urllib.urlretrieve(url, archive)
		with open(archive, 'rb') as f:
			assert(sha1 == hashlib.sha1(f.read()).hexdigest())
		with tarfile.open(archive) as tar:
			for member in tar.getmembers():
				path = os.path.normpath(member.name)
				if not path.startswith(skipprefix): continue
				path = self.mountpoint + path[len(skipprefix):]
				if any([path.startswith(e) for e in exclude]): continue
				if member.issym():
					self.symlink(path, member.linkname)
				elif member.isfile():
					self.mkdir(os.path.dirname(path))
					with open(self.__chroot_path(path), 'w') as dst:
						shutil.copyfileobj(tar.extractfile(member), dst, member.size)
					os.chmod(self.__chroot_path(path), member.mode)

	# __enter__ and __exit__ are just provided to support with for clarity of code.
	def __enter__(self):
		return self

	def __exit__(self, type, value, traceback):
		pass

def main(args):
	is_arm = platform.machine().startswith('arm')
	is_x86_64 = platform.machine().endswith('64')

	assert is_arm or is_x86_64, 'Unsupported architecture'

	if is_x86_64:
		abi = 'x86_64-linux-gnu'
	elif is_arm:
		abi = 'arm-linux-gnueabihf'

	def install_common(root):
		if not os.path.exists('/usr/lib/locale/locale-archive'):
			subprocess.check_call(['/usr/sbin/locale-gen', '--purge', 'en_US.UTF-8'])
		root.copyfromhost('/usr/lib/locale/locale-archive')
		root.copyfromhost('/etc/localtime')

		if is_x86_64:
			root.copyfromhost('/lib64/ld-linux-x86-64.so.2')
		elif is_arm:
			root.copyfromhost('/lib/ld-linux-armhf.so.3')
			root.copyfromhost('/usr/lib/arm-linux-gnueabihf/libcofi_rpi.so')

		root.copyfromhost('/lib/%s/libc-2.*.so' % abi)
		root.copyfromhost('/lib/%s/libc.so.6' % abi)
		root.copyfromhost('/lib/%s/libcap.so.2' % abi)
		root.copyfromhost('/lib/%s/libcrypt.so.1' % abi)
		root.copyfromhost('/lib/%s/libdl.so.2' % abi)
		root.copyfromhost('/lib/%s/libexpat.so.1' % abi)
		root.copyfromhost('/lib/%s/libgcc_s.so.1' % abi)
		root.copyfromhost('/lib/%s/libm.so.6' % abi)
		root.copyfromhost('/lib/%s/libpthread.so.0' % abi)
		root.copyfromhost('/lib/%s/librt.so.1' % abi)
		root.copyfromhost('/lib/%s/libtinfo.so.5' % abi)
		root.copyfromhost('/lib/%s/libutil.so.1' % abi)
		root.copyfromhost('/lib/%s/libz.so.1' % abi)
		root.copyfromhost('/usr/lib/%s/libffi.so.6' % abi)
		root.copyfromhost('/usr/lib/%s/libgmp.so.10' % abi)
		root.copyfromhost('/usr/lib/%s/libstdc++.so.6' % abi)

		root.write('/etc/passwd',
			'root:x:0:0:root:/:/bin/false\n' + \
			'nobody:x:65534:65534:nobody:/nonexistent:/bin/false')

		# Other miscellaneous mountpoints
		root.mkdir('/dev/')
		root.mkdir('/proc/')
		root.mkdir('/home/')
		root.mkdir('/sys/')

	with Chroot(os.path.join(args.target, 'root'), '/', link=args.link) as root:
		install_common(root)

		# /tmp is an (optional) mountpoint in the normal chroot, and
		# will be left read-only for the programs that don't need it.
		root.mkdir('/tmp/')

		# Mountpoints for libraries
		root.mkdir('/usr/lib/ruby/')
		root.mkdir('/usr/lib/python2.7/')
		root.mkdir('/usr/lib/jvm/')
		root.mkdir('/usr/lib/ghc/')
		root.mkdir('/opt/nodejs/')

		root.symlink('/usr/bin/node', '/opt/nodejs/bin/node')
		if is_x86_64:
			root.symlink('/usr/bin/java', '/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java')
		elif is_arm:
			root.symlink('/usr/bin/java', '/usr/lib/jvm/java-8-openjdk-armhf/jre/bin/java')
		root.symlink('/usr/lib/%s/libruby-2.1.so.2.1' % abi,
				'/usr/lib/ruby/2.1.0/libruby-2.1.so.2.1')
		root.symlink('/usr/bin/ruby', '/usr/lib/ruby/2.1.0/ruby')
		root.symlink('/usr/bin/python', '/usr/lib/python2.7/python')
		root.symlink('/usr/bin/ghc', '/usr/lib/ghc/lib/ghc')

		root.install('/usr/bin/ldwrapper', os.path.join(args.target, 'bin/ldwrapper'))
		root.install('/lib/libminijailpreload.so',
				os.path.join(args.target, 'bin/libminijailpreload.so'))
		root.install('/usr/bin/karel', '/usr/bin/karel')

	with Chroot(os.path.join(args.target, 'root-compilers'), '/', link=args.link) as root:
		install_common(root)

		root.copyfromhost('/usr/bin/gcc')
		root.copyfromhost('/usr/bin/g++')
		root.copyfromhost('/usr/bin/as')
		root.copyfromhost('/usr/lib/libopcodes-2.*-system*.so')
		root.copyfromhost('/usr/lib/libbfd-2.*-system*.so')
		root.copyfromhost('/usr/bin/fpc')
		root.copyfromhost('/usr/bin/ld')
		root.copyfromhost('/usr/bin/ld.bfd')
		if is_x86_64:
			root.copyfromhost('/usr/bin/ppcx64')
			root.copyfromhost('/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2')
			root.copyfromhost('/usr/lib/x86_64-linux-gnu/libgfortran.so.3')
			root.copyfromhost('/usr/lib/x86_64-linux-gnu/libitm.so.1')
			root.copyfromhost('/usr/lib/x86_64-linux-gnu/libquadmath.so.0')
			root.copyfromhost('/usr/lib/x86_64-linux-gnu/libtsan.so.0')
		elif is_arm:
			root.copyfromhost('/usr/bin/ppcarm')
			root.copyfromhost('/lib/arm-linux-gnueabihf/ld-linux-armhf.so.3')
			root.copyfromhost('/lib/arm-linux-gnueabihf/ld-linux.so.3')

		root.copyfromhost('/usr/lib/gcc/%s/4.9' % abi)
		root.symlink('/usr/lib/gcc/%s/ld' % abi, '/usr/bin/ld')

		root.copyfromhost('/usr/lib/%s/crt1.o' % abi)
		root.copyfromhost('/usr/lib/%s/crti.o' % abi)
		root.copyfromhost('/usr/lib/%s/crtn.o' % abi)
		root.copyfromhost('/usr/lib/%s/libasan.so.1' % abi)
		root.copyfromhost('/usr/lib/%s/libatomic.so.1' % abi)
		root.copyfromhost('/usr/lib/%s/libc.a' % abi)
		root.copyfromhost('/usr/lib/%s/libc.so' % abi)
		root.copyfromhost('/usr/lib/%s/libc_nonshared.a' % abi)
		root.copyfromhost('/usr/lib/%s/libcloog-isl.so.4' % abi)
		root.copyfromhost('/usr/lib/%s/libgomp.so.1' % abi)
		root.copyfromhost('/usr/lib/%s/libisl.so.*' % abi)
		root.copyfromhost('/usr/lib/%s/libm.a' % abi)
		root.copyfromhost('/usr/lib/%s/libm.so' % abi)
		root.copyfromhost('/usr/lib/%s/libmpc.so.3' % abi)
		root.copyfromhost('/usr/lib/%s/libmpfr.so.4' % abi)

		# For ghc
		root.symlink('/usr/lib/%s/libgmp.so' % abi, 'libgmp.so.10')
		root.symlink('/usr/lib/%s/librt.so' % abi, '/lib/%s/librt.so.1' % abi)
		root.symlink('/usr/lib/%s/libdl.so' % abi, '/lib/%s/libdl.so.2' % abi)
		root.copyfromhost('/usr/lib/%s/libffi.so' % abi)
                if is_arm:
                    # These dependencies are ARM-specific.
                    root.copyfromhost('/usr/lib/%s/libLLVM-3.4.so.1' % abi)
                    root.copyfromhost('/usr/lib/%s/libedit.so.2' % abi)
                    root.copyfromhost('/usr/lib/llvm-3.4')
                    root.symlink('/usr/bin/opt', '/usr/lib/llvm-3.4/bin/opt')
                    root.symlink('/usr/bin/llc', '/usr/lib/llvm-3.4/bin/llc')

		root.copyfromhost('/usr/lib/fpc/')

		root.copyfromhost('/usr/include/')

		root.write('/etc/passwd',
				'root:x:0:0:root:/:/bin/false\n' + \
				'nobody:x:65534:65534:nobody:/nonexistent:/bin/false')

		# Mountpoints for libraries
		root.mkdir('/usr/lib/ruby/')
		root.mkdir('/usr/lib/python2.7/')
		root.mkdir('/usr/lib/jvm/')
		root.mkdir('/usr/lib/ghc/')
		root.mkdir('/opt/nodejs/')

		root.symlink('/usr/lib/%s/libruby-2.1.so.2.1' % abi,
				'/usr/lib/ruby/2.1.0/libruby-2.1.so.2.1')
		if is_x86_64:
			root.symlink('/usr/bin/javac', '/usr/lib/jvm/java-8-openjdk-amd64/bin/javac')
		elif is_arm:
			root.symlink('/usr/bin/javac', '/usr/lib/jvm/java-8-openjdk-armhf/bin/javac')
		root.symlink('/usr/bin/ruby', '/usr/lib/ruby/2.1.0/ruby')
		root.symlink('/usr/bin/python', '/usr/lib/python2.7/python')
		root.symlink('/usr/bin/ghc', '/usr/lib/ghc/lib/ghc')
		root.symlink('/usr/lib/haskell-packages', '/usr/lib/ghc/haskell-packages')
		root.symlink('/tmp', '/home')

		root.install('/usr/bin/kcl', '/usr/bin/kcl')
		root.install('/usr/bin/ldwrapper', os.path.join(args.target, 'bin/ldwrapper'))
		root.install('/lib/libminijailpreload.so',
				os.path.join(args.target, 'bin/libminijailpreload.so'))

	with Chroot(os.path.join(args.target, 'root-openjdk'), '/usr/lib/jvm/', link=args.link) as root:
		root.copyfromhost('/usr/lib/jvm')

	with Chroot(os.path.join(args.target, 'root-python'), '/usr/lib/python2.7/', link=args.link) as root:
		root.copyfromhost('/usr/lib/python2.7',
				exclude=['/usr/lib/python2.7/dist-packages', '/usr/lib/python2.7/config-x86_64-linux-gnu'])
		root.install('/usr/lib/python2.7/python', '/usr/bin/python')

	with Chroot(os.path.join(args.target, 'root-ruby'), '/usr/lib/ruby/', link=args.link) as root:
		root.copyfromhost('/usr/lib/ruby')
		root.copyfromhost('/usr/lib/%s/ruby/' % abi,
				relative_to='/usr/lib/%s/ruby/' % abi)
		root.install('/usr/lib/ruby/2.1.0/libruby-2.1.so.2.1',
				'/usr/lib/%s/libruby-2.1.so.2.1' % abi)
		root.install('/usr/lib/ruby/2.1.0/ruby', '/usr/bin/ruby')

	with Chroot(os.path.join(args.target, 'root-hs'), '/usr/lib/ghc/', link=args.link) as root:
		root.copyfromhost('/usr/lib/ghc')
		if os.path.exists('/usr/lib/haskell-packages/'):
			root.copyfromhost('/usr/lib/haskell-packages/', relative_to='/usr/lib/')

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Build a chroot environment for minijail')
	parser.add_argument('--target', default='/var/lib/minijail',
	                    help='The directory in which the chroot environment will '
	                    'be built')
	parser.add_argument('--no-link', dest='link', action='store_false',
	                    help='Copy instead of linking files')
	parser.add_argument('command', nargs=argparse.REMAINDER)
	args = parser.parse_args()
	sys.exit(main(args))
